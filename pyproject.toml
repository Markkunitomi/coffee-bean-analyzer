[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "coffee-bean-analyzer"
version = "0.1.0"
description = "Computer vision system for automated coffee bean analysis"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Mark Kunitomi", email = "markkunitomi@example.com"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Image Processing",
]
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.20.0",
    "opencv-python-headless>=4.5.0",
    "scikit-image>=0.19.0",
    "matplotlib>=3.5.0",
    "pandas>=1.3.0",
    "click>=8.0.0",
    "pyyaml>=6.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
]

[project.scripts]
coffee-bean-analyzer = "coffee_bean_analyzer.cli.main:cli"

[project.urls]
Homepage = "https://github.com/Markkunitomi/coffee-bean-analyzer"
Repository = "https://github.com/Markkunitomi/coffee-bean-analyzer"
Issues = "https://github.com/Markkunitomi/coffee-bean-analyzer/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["coffee_bean_analyzer*"]
exclude = ["tests*"]

[tool.ruff]

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.8+
target-version = "py38"

[tool.ruff.lint]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # Pyflakes
    "I",  # isort
    "N",  # pep8-naming
    "D",  # pydocstyle
    "UP", # pyupgrade
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "SIM", # flake8-simplify
]

ignore = [
    "E501",   # Line too long (handled by formatter)
    "E722",   # Bare except statements (legacy code needs refactoring)
    "E741",   # Ambiguous variable names (legacy code)
    "D100",   # Missing docstring in public module
    "D102",   # Missing method docstrings
    "D104",   # Missing docstring in public package
    "D107",   # Missing __init__ docstrings
    "D203",   # 1 blank line required before class docstring
    "D213",   # Multi-line docstring summary should start at the second line
    "D205",   # Missing blank line after summary (legacy docstrings)
    "C901",   # Function too complex (legacy code)
    "ARG001", # Unused function arguments (interface compatibility)
    "ARG002", # Unused method arguments (interface compatibility)
    "SIM102", # Nested if statements (readability preference)
    "SIM108", # Ternary operator preference
    "SIM117", # Multiple with statements (readability preference)
    "F811",   # Redefinition (test method duplication)
    "F821",   # Undefined name (legacy code needs variable scope fixes)
    "N806",   # Variable naming in functions (constant style preference)
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Enable additional rules
extend-select = [
    "C90",  # mccabe complexity
    "PT",   # flake8-pytest-style
    "RET",  # flake8-return
    "ARG",  # flake8-unused-arguments
]

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and fixtures
"tests/**/*" = ["PLR2004", "S101", "ARG"]
"test_*.py" = ["PLR2004", "S101", "ARG"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pydocstyle]
convention = "google"  # or "numpy" for data science

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.mypy]
# Type checking configuration
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Ignore missing imports for packages without stubs
[[tool.mypy.overrides]]
module = [
    "cv2.*",
    "sklearn.*",
    "matplotlib.*",
    "pandas.*",
    "numpy.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "-ra",  # Show short test summary for all except passed
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["coffee_bean_analyzer", "analyzer"]
omit = ["*/tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]